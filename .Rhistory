network$W <- W
network$b <- b
return(network)
}
forward <- function(nn, inp){
h <- nn$h; w <- nn$W; b <- nn$b
h[[1]] <- inp
for(i in 1:(length(h)-1)){
h[[i+1]] <- apply(w[[i]]%*%t(h[[i]]) + b[[i]], 1, function(x){ max(0,x) })
}
nn$h <- h
nn
}
nn <- netup(c(4,2,3))
input <- matrix(c(5.1, 3.5, 1.4, 0.2), nrow=1)
h <- nn$h; w <- nn$W; b <- nn$b
h[[1]] <- inp
for(i in 1:(length(h)-1)){
h[[i+1]] <- apply(w[[i]]%*%t(h[[i]]) + b[[i]], 1, function(x){ max(0,x) })
}
forward <- function(nn, inp){
h <- nn$h; w <- nn$W; b <- nn$b
h[[1]] <- inp
for(i in 1:(length(h)-1)){
h[[i+1]] <- apply(w[[i]]%*%t(h[[i]]) + b[[i]], 1, function(x){ max(0,x) })
}
nn$h <- h
nn
}
forward <- function(nn, inp){
h <- nn$h; w <- nn$W; b <- nn$b
h[[1]] <- inp
for(i in 1:(length(h)-1)){
h[[i+1]] <- apply(w[[i]]%*%t(h[[i]]) + b[[i]], 1, function(x){ max(0,x) })
}
nn$h <- h
nn
}
nn <- netup(c(4,2,3))
input <- matrix(c(5.1, 3.5, 1.4, 0.2), nrow=1)
nn <- forward(nn, input)
netup <- function(d) {
# Check if the d has at least 2 elements
if (length(d) < 2) {
stop("Should have more than 2 lenght")
}
# Initialize the network as a list
network <- list()
# Initialize the lists for nodes, weights, and offsets
h <- list()
W <- list()
b <- list()
set.seed(111)
# Loop through each layer dim and initialie the values
for (l in 1:(length(d))) {
# Initialize nodes for this layer that will contain node values
h[[l]] <- numeric(d[l])
if(l != length(d)){
# Initialize weight matrix W[[l]] with random values from U(0, 0.2)
W[[l]] <- matrix(runif(d[l + 1] * d[l], 0, 0.2), nrow = d[l], ncol = d[l + 1])
# Initialize offset vector b[[l]] with random values from U(0, 0.2)
b[[l]] <- runif(d[l + 1], 0, 0.2)
}
}
network$h <- h
network$W <- W
network$b <- b
return(network)
}
forward <- function(nn, inp){
h <- nn$h; w <- nn$W; b <- nn$b
h[[1]] <- inp
for(i in 1:(length(h)-1)){
h[[i+1]] <- apply(w[[i]]%*%t(h[[i]]) + b[[i]], 1, function(x){ max(0,x) })
}
nn$h <- h
nn
}
nn <- netup(c(4,2,3))
input <- matrix(c(5.1, 3.5, 1.4, 0.2), nrow=1)
nn <- forward(nn, input)
h <- nn$h; w <- nn$W; b <- nn$b
h[[1]] <- inp
inp <- matrix(c(5.1, 3.5, 1.4, 0.2), nrow=1)
h <- nn$h; w <- nn$W; b <- nn$b
h[[1]] <- inp
for(i in 1:(length(h)-1)){
h[[i+1]] <- apply(w[[i]]%*%t(h[[i]]) + b[[i]], 1, function(x){ max(0,x) })
}
i=1
h[[1]] <- inp
dim(w[[i]])
dim(t(h[[i]]))
# Check if the d has at least 2 elements
if (length(d) < 2) {
stop("Should have more than 2 lenght")
}
netup <- function(d) {
# Check if the d has at least 2 elements
if (length(d) < 2) {
stop("Should have more than 2 lenght")
}
# Initialize the network as a list
network <- list()
# Initialize the lists for nodes, weights, and offsets
h <- list()
W <- list()
b <- list()
set.seed(111)
# Loop through each layer dim and initialie the values
for (l in 1:(length(d))) {
# Initialize nodes for this layer that will contain node values
h[[l]] <- numeric(d[l])
if(l != length(d)){
# Initialize weight matrix W[[l]] with random values from U(0, 0.2)
W[[l]] <- matrix(runif(d[l + 1] * d[l], 0, 0.2), nrow = d[l], ncol = d[l + 1])
# Initialize offset vector b[[l]] with random values from U(0, 0.2)
b[[l]] <- runif(d[l + 1], 0, 0.2)
}
}
network$h <- h
network$W <- W
network$b <- b
return(network)
}
nn <- netup(c(4,2,3))
inp <- matrix(c(5.1, 3.5, 1.4, 0.2), nrow=1)
h <- nn$h; w <- nn$W; b <- nn$b
h[[1]] <- inp
i=1
dim(w[[i]])
netup <- function(d) {
# Check if the d has at least 2 elements
if (length(d) < 2) {
stop("Should have more than 2 lenght")
}
# Initialize the network as a list
network <- list()
# Initialize the lists for nodes, weights, and offsets
h <- list()
W <- list()
b <- list()
set.seed(111)
# Loop through each layer dim and initialie the values
for (l in 1:(length(d))) {
# Initialize nodes for this layer that will contain node values
h[[l]] <- numeric(d[l])
if(l != length(d)){
# Initialize weight matrix W[[l]] with random values from U(0, 0.2)
W[[l]] <- matrix(runif(d[l + 1] * d[l], 0, 0.2), nrow = d[l+1], ncol = d[l])
# Initialize offset vector b[[l]] with random values from U(0, 0.2)
b[[l]] <- runif(d[l + 1], 0, 0.2)
}
}
network$h <- h
network$W <- W
network$b <- b
return(network)
}
nn <- netup(c(4,2,3))
inp <- matrix(c(5.1, 3.5, 1.4, 0.2), nrow=1)
h <- nn$h; w <- nn$W; b <- nn$b
h[[1]] <- inp
i=1
dim(w[[i]])
dim(t(h[[i]]))
h[[i+1]] <- apply(w[[i]]%*%t(h[[i]]) + b[[i]], 1, function(x){ max(0,x) })
i=2
dim(w[[i]])
dim(t(h[[i]]))
netup <- function(d) {
# Check if the d has at least 2 elements
if (length(d) < 2) {
stop("Should have more than 2 lenght")
}
# Initialize the network as a list
network <- list()
# Initialize the lists for nodes, weights, and offsets
h <- list()
W <- list()
b <- list()
set.seed(111)
# Loop through each layer dim and initialie the values
for (l in 1:(length(d))) {
# Initialize nodes for this layer that will contain node values
h[[l]] <- numeric(d[l])
if(l != length(d)){
# Initialize weight matrix W[[l]] with random values from U(0, 0.2)
W[[l]] <- matrix(runif(d[l + 1] * d[l], 0, 0.2), nrow = d[l+1], ncol = d[l])
# Initialize offset vector b[[l]] with random values from U(0, 0.2)
b[[l]] <- runif(d[l + 1], 0, 0.2)
}
}
network$h <- h
network$W <- W
network$b <- b
return(network)
}
nn <- netup(c(4,2,3))
inp <- matrix(c(5.1, 3.5, 1.4, 0.2), nrow=1)
h <- nn$h; w <- nn$W; b <- nn$b
h[[1]] <- t(inp)
i=1
dim(w[[i]])
dim(t(h[[i]]))
dim(w[[i]])
dim(h[[i]])
h[[i+1]] <- apply(w[[i]]%*%h[[i]] + b[[i]], 1, function(x){ max(0,x) })
i=2
dim(w[[i]])
dim(h[[i]])
dim(h[[i]])
dim(w[[i]])
dim(h[[i]])
h[[1]] <- t(inp)
i=1
dim(w[[i]])
dim(h[[i]])
h[[i+1]] <- apply(w[[i]]%*%h[[i]] + b[[i]], 1, function(x){ max(0,x) })
i=2
dim(w[[i]])
dim(h[[i]])
h <- nn$h; w <- nn$W; b <- nn$b
h[[1]] <- t(inp)
dim(w[[i]])
dim(h[[i]])
i=1
dim(w[[i]])
dim(h[[i]])
dim(w[[i]]%*%h[[i]])
dim(b[[i]])
netup <- function(d) {
# Check if the d has at least 2 elements
if (length(d) < 2) {
stop("Should have more than 2 lenght")
}
# Initialize the network as a list
network <- list()
# Initialize the lists for nodes, weights, and offsets
h <- list()
W <- list()
b <- list()
set.seed(111)
# Loop through each layer dim and initialie the values
for (l in 1:(length(d))) {
# Initialize nodes for this layer that will contain node values
h[[l]] <- numeric(d[l])
if(l != length(d)){
# Initialize weight matrix W[[l]] with random values from U(0, 0.2)
W[[l]] <- matrix(runif(d[l + 1] * d[l], 0, 0.2), nrow = d[l+1], ncol = d[l])
# Initialize offset vector b[[l]] with random values from U(0, 0.2)
b[[l]] <- matrix(runif(d[l + 1], 0, 0.2), nrow = d[l+1])
}
}
network$h <- h
network$W <- W
network$b <- b
return(network)
}
nn <- netup(c(4,2,3))
inp <- matrix(c(5.1, 3.5, 1.4, 0.2), nrow=1)
h <- nn$h; w <- nn$W; b <- nn$b
h[[1]] <- t(inp)
i=1
dim(w[[i]])
dim(h[[i]])
h[[2]] <- apply(w[[i]]%*%h[[i]] + b[[i]], 1, function(x){ max(0,x) })
dim(b[[i]])
h[[2]]
dim(h[[2]])
dim(w[[i]]%*%h[[i]])
dim(b[[i]])
dim(apply(w[[i]]%*%h[[i]] + b[[i]], 1, function(x){ max(0,x) }))
apply(w[[i]]%*%h[[i]] + b[[i]], 1, function(x){ max(0,x) })
dim(apply(w[[i]]%*%h[[i]] + b[[i]], 1:2, function(x){ max(0,x) }))
w[[i]]
w[[i]]%*%h[[i]]
w[[i]]%*%h[[i]] + b[[i]]
apply(w[[i]]%*%h[[i]] + b[[i]], 1:2, function(x){ max(0,x) })
i=2
dim(w[[i]])
dim(h[[i]])
i=1
dim(w[[i]])
dim(h[[i]])
h[[i+1]] <- apply(w[[i]]%*%h[[i]] + b[[i]], 1, function(x){ max(0,x) })
i=2
dim(w[[i]])
dim(h[[i]])
i=1
dim(w[[i]])
dim(h[[i]])
h[[i+1]] <- apply(w[[i]]%*%h[[i]] + b[[i]], 1:2, function(x){ max(0,x) })
i=2
dim(w[[i]])
dim(h[[i]])
h[[i+1]] <- apply(w[[i]]%*%h[[i]] + b[[i]], 1:2, function(x){ max(0,x) })
dim(w[[i]])
i=3
dim(w[[i]])
dim(h[[i]])
netup <- function(d) {
# Check if the d has at least 2 elements
if (length(d) < 2) {
stop("Should have more than 2 lenght")
}
# Initialize the network as a list
network <- list()
# Initialize the lists for nodes, weights, and offsets
h <- list()
W <- list()
b <- list()
set.seed(111)
# Loop through each layer dim and initialie the values
for (l in 1:(length(d))) {
# Initialize nodes for this layer that will contain node values
h[[l]] <- numeric(d[l])
if(l != length(d)){
# Initialize weight matrix W[[l]] with random values from U(0, 0.2)
W[[l]] <- matrix(runif(d[l + 1] * d[l], 0, 0.2), nrow = d[l+1], ncol = d[l])
# Initialize offset vector b[[l]] with random values from U(0, 0.2)
b[[l]] <- matrix(runif(d[l + 1], 0, 0.2), nrow = d[l+1])
}
}
network$h <- h
network$W <- W
network$b <- b
return(network)
}
netup <- function(d) {
# Check if the d has at least 2 elements
if (length(d) < 2) {
stop("Should have more than 2 lenght")
}
# Initialize the network as a list
network <- list()
# Initialize the lists for nodes, weights, and offsets
h <- list()
W <- list()
b <- list()
set.seed(111)
# Loop through each layer dim and initialie the values
for (l in 1:(length(d))) {
# Initialize nodes for this layer that will contain node values
h[[l]] <- numeric(d[l])
if(l != length(d)){
# Initialize weight matrix W[[l]] with random values from U(0, 0.2)
W[[l]] <- matrix(runif(d[l + 1] * d[l], 0, 0.2), nrow = d[l+1], ncol = d[l])
# Initialize offset vector b[[l]] with random values from U(0, 0.2)
b[[l]] <- matrix(runif(d[l + 1], 0, 0.2), nrow = d[l+1])
}
}
network$h <- h
network$W <- W
network$b <- b
return(network)
}
forward <- function(nn, inp){
h <- nn$h; w <- nn$W; b <- nn$b
h[[1]] <- t(inp)
for(i in 1:(length(h)-1)){
h[[i+1]] <- apply(w[[i]]%*%h[[i]] + b[[i]], 1:2, function(x){ max(0,x) })
}
nn$h <- h
nn
}
forward <- function(nn, inp){
h <- nn$h; w <- nn$W; b <- nn$b
h[[1]] <- t(inp)
for(i in 1:(length(h)-1)){
h[[i+1]] <- apply(w[[i]]%*%h[[i]] + b[[i]], 1:2, function(x){ max(0,x) })
}
nn$h <- h
nn
}
nn <- netup(c(4,2,3))
nn <- forward(nn, inp)
a<- matrix(c(1,2,0,3), nrow = 2)
b<- c(1,2)
model1 <- jags.model(model_file1, data = data) #Model Compiled
library(rjags) # Load jags and coda libraries
library(coda)
library(ggplot2) # ggplot2 for graphs and plots
## Function for developing the effect dose graph
#  Input:
#  df <- Data from vin.txt file
#  samples <- gsamples generated from model
#  model <- the model we want to generate plot for
#  model_file <- integer value indicating which model- 1 or 2
## Output: The Effect-Dose plot with model and 95% Credible Interval
effectDoseGraph <- function(df, samples, model, model_file){
## Calculating the posterior expected effect from model
temp = do.call(rbind.data.frame, samples) ## Convert to dataframe
lower<-rep(NA, 45) ##  lower bound of 95% CI
mean<-rep(NA, 45) ## mean expected effect from model
upper<-rep(NA, 45) ## upper bound of 95% CI
for(j in 1:5){ ## Loop through experimental runs
for(i in 1:9){ ## Loop through concentration values
M = gsub(" ", "", paste("M[",j,"]")) ## M index
if(model_file==1){
mu = gsub(" ", "", paste("mu[",i,"]")) ## Model1 - use mu_i
} else{
mu = gsub(" ", "", paste("mu[",i,",",j,"]")) ## Model2 - use mu_i_j
}
predicted_effect = temp[M]*temp[mu] ## seperate column Mj * mu_i
mean[(j-1)*9+i]<-mean(predicted_effect[[1]]) ## mean expected effect
lower[(j-1)*9+i]<-quantile(predicted_effect[[1]], 0.025)[["2.5%"]] ##lower bound
upper[(j-1)*9+i]<-quantile(predicted_effect[[1]], 0.975)[["97.5%"]] ##upper bound
}
}
## Create a data frame for plotting the effect against dose
plot_data <- data.frame(
Dose = rep(1:9, times = 5),  ## Assuming 5 experiments for each dose level
Effect = as.vector(df$effect), ## The original effect from data
Exp_Run = rep(1:5, each = 9), ## Experimental run
expected_model_effect <- mean, ## Mean Expected effect from model
min<-lower, ## lower bound for 95% CI
max<-upper ## Upper bound for 95% CI
)
# Plotting the data
p<-ggplot(plot_data, aes(x = Dose, y = Effect, color = factor(Exp_Run))) + ## data points
geom_point() +
geom_line(aes(x=Dose, y=expected_model_effect)) + ## Model as lines
geom_ribbon(aes(x=Dose, ymin = min, ymax = max), alpha = 0.2)+  ## 95% credible intervals
theme_minimal() +
labs(title = paste("Effect vs. Dose: Model",model_file), ## Title of graph
x = "Dose Index", ## x-axis of graph
y = "Effect")  ## y-axis of graph
plot(p) ## Plot the above graph
}
data_path <- "vin.txt" ## dataset file path
model_file1 <- "M1s2512060.jags" ## Model1 file path
model_file2 <- "M2s2512060.jags" ## Model2 file path
df = read.table(data_path, header=TRUE) ## Reading the data
data_matrix <-
with(df, ##dataframe to a matrix
matrix(effect,
nrow = length(unique(conc)), ## Rows for Concentration
ncol = length(unique(exper)) ## Cols for experiment
))
#getwd()
setwd("/Users/aryanverma/Desktop/ExtendedSP/Assignment 5/")
## Function for developing the effect dose graph
#  Input:
#  df <- Data from vin.txt file
#  samples <- gsamples generated from model
#  model <- the model we want to generate plot for
#  model_file <- integer value indicating which model- 1 or 2
## Output: The Effect-Dose plot with model and 95% Credible Interval
effectDoseGraph <- function(df, samples, model, model_file){
## Calculating the posterior expected effect from model
temp = do.call(rbind.data.frame, samples) ## Convert to dataframe
lower<-rep(NA, 45) ##  lower bound of 95% CI
mean<-rep(NA, 45) ## mean expected effect from model
upper<-rep(NA, 45) ## upper bound of 95% CI
for(j in 1:5){ ## Loop through experimental runs
for(i in 1:9){ ## Loop through concentration values
M = gsub(" ", "", paste("M[",j,"]")) ## M index
if(model_file==1){
mu = gsub(" ", "", paste("mu[",i,"]")) ## Model1 - use mu_i
} else{
mu = gsub(" ", "", paste("mu[",i,",",j,"]")) ## Model2 - use mu_i_j
}
predicted_effect = temp[M]*temp[mu] ## seperate column Mj * mu_i
mean[(j-1)*9+i]<-mean(predicted_effect[[1]]) ## mean expected effect
lower[(j-1)*9+i]<-quantile(predicted_effect[[1]], 0.025)[["2.5%"]] ##lower bound
upper[(j-1)*9+i]<-quantile(predicted_effect[[1]], 0.975)[["97.5%"]] ##upper bound
}
}
## Create a data frame for plotting the effect against dose
plot_data <- data.frame(
Dose = rep(1:9, times = 5),  ## Assuming 5 experiments for each dose level
Effect = as.vector(df$effect), ## The original effect from data
Exp_Run = rep(1:5, each = 9), ## Experimental run
expected_model_effect <- mean, ## Mean Expected effect from model
min<-lower, ## lower bound for 95% CI
max<-upper ## Upper bound for 95% CI
)
# Plotting the data
p<-ggplot(plot_data, aes(x = Dose, y = Effect, color = factor(Exp_Run))) + ## data points
geom_point() +
geom_line(aes(x=Dose, y=expected_model_effect)) + ## Model as lines
geom_ribbon(aes(x=Dose, ymin = min, ymax = max), alpha = 0.2)+  ## 95% credible intervals
theme_minimal() +
labs(title = paste("Effect vs. Dose: Model",model_file), ## Title of graph
x = "Dose Index", ## x-axis of graph
y = "Effect")  ## y-axis of graph
plot(p) ## Plot the above graph
}
data_path <- "vin.txt" ## dataset file path
model_file1 <- "M1s2512060.jags" ## Model1 file path
model_file2 <- "M2s2512060.jags" ## Model2 file path
df = read.table(data_path, header=TRUE) ## Reading the data
data_matrix <-
with(df, ##dataframe to a matrix
matrix(effect,
nrow = length(unique(conc)), ## Rows for Concentration
ncol = length(unique(exper)) ## Cols for experiment
))
data <- list( ## Converting matrix to a list
n_concentrations = 9, ## Concentration in rows
n_experiments = 5, ## Experimental runs in columns
Y = data_matrix ## Values as effect observed
)
model1 <- jags.model(model_file1, data = data) #Model Compiled
update(model1, 1000) #Burning in
samples <- coda.samples(model1, ## generating samples
c("x", "M","mu", "tau", "tau_o"), # Parameters
n.iter = 27000) # iterations = 27000
a_list %>% purrr::list_modify("mu" = NULL)
a_list <- purrr::list_modify("mu" = NULL)
source("~/Desktop/ExtendedSP/Assignment 5/s2512060.R")
